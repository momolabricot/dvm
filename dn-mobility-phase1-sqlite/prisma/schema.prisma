// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

//////////////////////
// ENUMS
//////////////////////

enum Role {
  ADMIN
  ADMIN_IT
  CLIENT
  CONVOYEUR
}

enum MissionStatus {
  DRAFT
  PLANNED
  ASSIGNED
  IN_PROGRESS
  DONE
  CANCELED
}

enum PayoutStatus {
  PENDING
  PAID
  CANCELED
}

//////////////////////
// MODELS
//////////////////////

model User {
  id           String   @id @default(cuid())
  email        String   @unique
  name         String?
  phone        String?
  role         Role     @default(CLIENT)

  // Auth simple
  passwordHash String?

  // Statut compte
  isActive     Boolean  @default(true)

  // Audit
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Qui a créé ce compte
  createdById  String?
  createdBy    User?    @relation("UsersCreator", fields: [createdById], references: [id])
  createdUsers User[]   @relation("UsersCreator")

  // Profils associés (1–1)
  clientProfile    ClientProfile?
  convoyeurProfile ConvoyeurProfile?

  // Missions créées (admin / admin_it)
  missionsCreated Mission[] @relation("MissionsCreatedBy")
}

model ClientProfile {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])

  companyName String?
  vatNumber   String?
  address     String?

  priceFactor Float    @default(1.0)  // multiplicateur de prix client
  isActive    Boolean  @default(true) // client actif/inactif

  quotes   Quote[]
  missions Mission[]
}

model ConvoyeurProfile {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  iban       String?
  ratePerKm  Float?

  missions   Mission[]      @relation("ConvoyeurMissions")
}

model Quote {
  id        String   @id @default(cuid())
  number    String   @unique
  createdAt DateTime @default(now())

  // lien (facultatif) vers le client si reconnu
  clientId  String?
  client    ClientProfile? @relation(fields: [clientId], references: [id])

  // (éventuelle) relation 1-1 vers mission
  mission   Mission?  @relation("QuoteMission")
}

model Mission {
  id            String         @id @default(cuid())
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  title         String
  description   String?

  clientId      String
  client        ClientProfile  @relation(fields: [clientId], references: [id])

  // 1-1: FK unique vers quote
  quoteId       String?  @unique
  quote         Quote?   @relation("QuoteMission", fields: [quoteId], references: [id])

  assignedToId  String?
  assignedTo    ConvoyeurProfile? @relation("ConvoyeurMissions", fields: [assignedToId], references: [id])

  scheduledAt    DateTime?
  pickupAddress  String
  dropoffAddress String
  distanceKm     Float?

  // Prix visibles client + interne convoyeur
  clientPriceTTC Float?
  payoutAmount   Float?
  payoutStatus   PayoutStatus?  @default(PENDING)

  status         MissionStatus  @default(DRAFT)

  createdById   String?
  createdBy     User?          @relation("MissionsCreatedBy", fields: [createdById], references: [id])
}

model Counter {
  counter_date DateTime @id
  value        Int      @default(0)

  @@map("counters")
}
